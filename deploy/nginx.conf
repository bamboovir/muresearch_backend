# https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/
events {
  worker_connections  4096;
}

#stream {
#  upstream   stream_backend {
#    zone   upstream_backend 64k;
#    server backend1.example.com:12345;
# }
#  match tcp_test {
#
# }
#  server {
#    listen        12345;
#    proxy_pass    stream_backend;
#    health_check  port=12346 interval=10 passes=2 fails=3 match=tcp_test;
#    health_check_timeout 5s;
#  }
#}

http {

  error_log /etc/nginx/error_log.log warn;
  client_max_body_size 20m;

  proxy_cache_path /etc/nginx/cache keys_zone=one:500m max_size=1000m loader_threshold=300 loader_files=200;
  #proxy_set_header X-Real-IP       $proxy_protocol_addr;
  #proxy_set_header X-Forwarded-For $proxy_protocol_addr;

  # log_format combined '$proxy_protocol_addr - $remote_user [$time_local] '
  #'"$request" $status $body_bytes_sent '
  #'"$http_referer" "$http_user_agent"';

  #match muresearch_ok {
  #  status 200-399;
  #  body !~ "maintenance mode";
  #}

  #match muresearchalgo_ok {
  #  status 200-399;
  #  body !~ "maintenance mode";
  #}

  #upstream muresearchbe {
  #  zone muresearch 64k # Specify a shared memory zone
  #  ip_hash;
  #  server muresearch:8080 weight=3; # default weight 1
  #  server srv2.***.com # fail_timeout=30s max_fails=3 slow_start=30s
  #  server srv3.***.com
  #}

  #upstream muresearchalgo {
  #  ip_hash;
  #  server muresearchalgo:5000 weight=3;
  #  server srv2.***.com
  #  server srv3.***.com
  #}

  server {
    listen 8000; # proxy_protocol;
    #listen [::]:80 ssl proxy_protocol;

    #listen 443 ssl proxy_protocol;
    #listen [::]:443 ssl proxy_protocol;
    #ssl_certificate      /etc/nginx/ssl/public.example.com.pem;
    #ssl_certificate_key  /etc/nginx/ssl/public.example.com.key;
    #server_name muresearch.com;

    #gzip on;
    #gzip_types text / plain application / xml;
    #gzip_proxied no-cache no-store private expired auth;
    #gzip_min_length 1000;

    proxy_cache one;
    proxy_cache_key $request_method$request_uri;
    proxy_cache_min_uses 1;
    proxy_cache_methods GET HEAD POST;
    proxy_cache_valid 200 10m;
    #proxy_buffers 16 4k;
    #proxy_buffer_size 2k;

    location /be {
      proxy_pass http://muresearch:8080;
      #proxy_set_header Host $host;
      #proxy_set_header X-Real-IP $remote_addr;
      rewrite ^/be(.*)$ $1 break;
      # health_check interval=10 fails=3 passes=2 uri=/ match=muresearch_ok;
    }

    location /algo {
      proxy_pass http://muresearchalgo:5000;
      #proxy_set_header Host $host;
      #proxy_set_header X-Real-IP $remote_addr;
      rewrite ^/algo(.*)$ $1 break;
      # health_check interval=10 fails=3 passes=2 uri=/ match=muresearchalgo_ok;
    }
  }
}